"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/utils/api.ts":
/*!**************************!*\
  !*** ./src/utils/api.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:9000/api\";\nclass ApiService {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            },\n            ...options\n        };\n        // Add auth token if available\n        const token = this.getAuthToken();\n        if (token) {\n            config.headers = {\n                ...config.headers,\n                Authorization: \"Bearer \".concat(token)\n            };\n        }\n        try {\n            const response = await fetch(url, config);\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.error || \"HTTP error! status: \".concat(response.status));\n            }\n            return data;\n        } catch (error) {\n            console.error(\"API request failed:\", error);\n            throw error;\n        }\n    }\n    getAuthToken() {\n        if (true) {\n            return localStorage.getItem(\"authToken\");\n        }\n        return null;\n    }\n    setAuthToken(token) {\n        if (true) {\n            localStorage.setItem(\"authToken\", token);\n        }\n    }\n    removeAuthToken() {\n        if (true) {\n            localStorage.removeItem(\"authToken\");\n        }\n    }\n    // Authentication\n    async login(credentials) {\n        const response = await this.request(\"/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify(credentials)\n        });\n        if (response.success && response.data) {\n            this.setAuthToken(response.data.accessToken);\n            return response.data;\n        }\n        throw new Error(response.error || \"Login failed\");\n    }\n    async register(userData) {\n        const response = await this.request(\"/auth/register\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Registration failed\");\n    }\n    async logout() {\n        try {\n            await this.request(\"/auth/logout\", {\n                method: \"POST\"\n            });\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n        } finally{\n            this.removeAuthToken();\n        }\n    }\n    async refreshToken(refreshToken) {\n        const response = await this.request(\"/auth/refresh\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                refreshToken\n            })\n        });\n        if (response.success && response.data) {\n            this.setAuthToken(response.data.accessToken);\n            return response.data;\n        }\n        throw new Error(response.error || \"Token refresh failed\");\n    }\n    // Users\n    async getUsers(params) {\n        const queryParams = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) {\n                    queryParams.append(key, value.toString());\n                }\n            });\n        }\n        const response = await this.request(\"/users?\".concat(queryParams.toString()));\n        if (response.success && response.data) {\n            // Transform the response to match the expected structure\n            return {\n                items: response.data.users,\n                pagination: response.data.pagination\n            };\n        }\n        throw new Error(response.error || \"Failed to fetch users\");\n    }\n    async getUser(id) {\n        const response = await this.request(\"/users/\".concat(id));\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch user\");\n    }\n    async createUser(userData) {\n        const response = await this.request(\"/users\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to create user\");\n    }\n    async updateUser(id, userData) {\n        const response = await this.request(\"/users/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(userData)\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to update user\");\n    }\n    async deleteUser(id) {\n        const response = await this.request(\"/users/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!response.success) {\n            throw new Error(response.error || \"Failed to delete user\");\n        }\n    }\n    // KYC Applications\n    async getKYCApplications() {\n        const response = await this.request(\"/kyc\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch KYC applications\");\n    }\n    async updateKYCStatus(id, status, notes) {\n        const response = await this.request(\"/kyc/\".concat(id, \"/status\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                status,\n                notes\n            })\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to update KYC status\");\n    }\n    // Transactions\n    async getTransactions() {\n        const response = await this.request(\"/transactions\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch transactions\");\n    }\n    async updateTransactionStatus(id, status) {\n        const response = await this.request(\"/transactions/\".concat(id, \"/status\"), {\n            method: \"PATCH\",\n            body: JSON.stringify({\n                status\n            })\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to update transaction status\");\n    }\n    // Analytics\n    async getDashboardAnalytics() {\n        const response = await this.request(\"/analytics/dashboard\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch dashboard analytics\");\n    }\n    async getUserAnalytics() {\n        const response = await this.request(\"/analytics/users\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch user analytics\");\n    }\n    async getTransactionAnalytics() {\n        const response = await this.request(\"/analytics/transactions\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch transaction analytics\");\n    }\n    // Notifications\n    async getNotifications() {\n        const response = await this.request(\"/notifications\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch notifications\");\n    }\n    async markNotificationAsRead(id) {\n        const response = await this.request(\"/notifications/\".concat(id, \"/read\"), {\n            method: \"PUT\"\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to mark notification as read\");\n    }\n    // Settings\n    async getSettings() {\n        const response = await this.request(\"/settings\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch settings\");\n    }\n    async updateSetting(key, value) {\n        const response = await this.request(\"/settings/\".concat(key), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                value\n            })\n        });\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to update setting\");\n    }\n    // Admin\n    async getAdminDashboard() {\n        const response = await this.request(\"/admin/dashboard\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch admin dashboard\");\n    }\n    async getSystemStats() {\n        const response = await this.request(\"/admin/stats\");\n        if (response.success && response.data) {\n            return response.data;\n        }\n        throw new Error(response.error || \"Failed to fetch system stats\");\n    }\n    constructor(){\n        this.baseURL = API_BASE_URL;\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/api.ts\n"));

/***/ })

});